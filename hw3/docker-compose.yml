services:
  payments-db:
    profiles: ["all", "db", "payments", "external", "backend"]
    image: postgres:16-alpine
    container_name: payments-db
    environment:
      POSTGRES_DB: payments_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - payments-db-data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  order-db:
    profiles: ["all", "db", "order", "external", "backend"]
    image: postgres:16-alpine
    container_name: order-db
    environment:
      POSTGRES_DB: order_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5433:5432"
    volumes:
      - order-db-data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  api-gateway:
    profiles: ["all", "backend"]
    build:
      dockerfile: api_gateway/Dockerfile
    container_name: api-gateway
    ports:
      - "8080:8080"
    depends_on:
      - payments-service
      - order-service
    environment:
      ORDER_SERVICE_HOST: order-service
      ORDER_SERVICE_GRPC_PORT: 8998
      PAYMENTS_SERVICE_HOST: payments-service
      PAYMENTS_SERVICE_GRPC_PORT: 8999
      SERVER_PORT: 8080
    networks:
      - app-network

  payments-service:
    profiles: ["all", "payments", "backend"]
    build:
      dockerfile: payments_service/Dockerfile
    container_name: payments-service
    ports:
      - "8081:8081"
      - "8999:8999"
    depends_on:
      - payments-db
      - kafka
      - zookeeper
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://payments-db:5432/payments_db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      KAFKA_BOOTSTRAP_SERVER: kafka:9092
    networks:
      - app-network

  order-service:
    profiles: ["all", "order", "backend"]
    build:
      dockerfile: order_service/Dockerfile
    container_name: order-service
    ports:
      - "8082:8082"
      - "8998:8998"
    depends_on:
      - order-db
      - kafka
      - zookeeper
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://order-db:5432/order_db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      KAFKA_BOOTSTRAP_SERVER: kafka:9092
    networks:
      - app-network

  zookeeper:
    profiles: ["all", "kafka", "external", "backend"]
    image: bitnami/zookeeper:3.8
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ALLOW_ANONYMOUS_LOGIN: yes
    networks:
      - app-network

  kafka:
    profiles: ["all", "kafka", "external", "backend"]
    image: bitnami/kafka:3.3
    container_name: kafka
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CFG_LISTENERS: PLAINTEXT://0.0.0.0:9092,EXTERNAL://0.0.0.0:29092
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,EXTERNAL://localhost:29092
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: true
    depends_on:
      - zookeeper
    networks:
      - app-network

  kafka-ui:
    profiles: ["all", "kafka", "external", "backend"]
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8085:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092, localhost:9092, localhost:29092
    depends_on:
      - kafka
    networks:
      - app-network

  frontend:
    profiles: ["all", "frontend"]
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    ports:
      - "5173:5173"
    depends_on:
      - api-gateway
    networks:
      - app-network
    environment:
      VITE_API_URL: "http://localhost:8080"

networks:
  app-network:
    driver: bridge

volumes:
  payments-db-data:
  order-db-data: